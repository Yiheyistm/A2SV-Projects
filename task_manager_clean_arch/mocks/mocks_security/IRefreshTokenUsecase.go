// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_security

import (
	jwt "github.com/golang-jwt/jwt/v4"
	domain "github.com/yiheyistm/task_manager/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// IRefreshTokenUsecase is an autogenerated mock type for the IRefreshTokenUsecase type
type IRefreshTokenUsecase struct {
	mock.Mock
}

// GenerateTokens provides a mock function with given fields: user
func (_m *IRefreshTokenUsecase) GenerateTokens(user domain.User) (domain.RefreshToken, error) {
	ret := _m.Called(user)
	if len(ret) == 0 {
		panic("no return value specified for GenerateTokens")
	}

	var r0 domain.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (domain.RefreshToken, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) domain.RefreshToken); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: _a0
func (_m *IRefreshTokenUsecase) GetByUsername(_a0 string) (*domain.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRefreshToken provides a mock function with given fields: token
func (_m *IRefreshTokenUsecase) ValidateRefreshToken(token string) (jwt.MapClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.MapClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.MapClaims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *IRefreshTokenUsecase) ValidateToken(tokenString string) (jwt.MapClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.MapClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.MapClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRefreshTokenUsecase creates a new instance of IRefreshTokenUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRefreshTokenUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRefreshTokenUsecase {
	mock := &IRefreshTokenUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
