// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_domain

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/yiheyistm/task_manager/internal/domain"
)

// ITaskUseCase is an autogenerated mock type for the ITaskUseCase type
type ITaskUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *ITaskUseCase) Create(_a0 *domain.Task) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Task) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *ITaskUseCase) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByIdAndUser provides a mock function with given fields: _a0, _a1
func (_m *ITaskUseCase) DeleteByIdAndUser(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIdAndUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *ITaskUseCase) GetAll() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *ITaskUseCase) GetById(_a0 string) (domain.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIdAndUser provides a mock function with given fields: _a0, _a1
func (_m *ITaskUseCase) GetByIdAndUser(_a0 string, _a1 string) (domain.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByIdAndUser")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskCountByStatus provides a mock function with no fields
func (_m *ITaskUseCase) GetTaskCountByStatus() ([]domain.StatusCount, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTaskCountByStatus")
	}

	var r0 []domain.StatusCount
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.StatusCount, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.StatusCount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StatusCount)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatsByUser provides a mock function with given fields: _a0
func (_m *ITaskUseCase) GetTaskStatsByUser(_a0 string) ([]domain.StatusCount, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatsByUser")
	}

	var r0 []domain.StatusCount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.StatusCount, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.StatusCount); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.StatusCount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksByUser provides a mock function with given fields: _a0
func (_m *ITaskUseCase) GetTasksByUser(_a0 string) ([]domain.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByUser")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ITaskUseCase) Update(_a0 string, _a1 *domain.Task) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByIdAndUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *ITaskUseCase) UpdateByIdAndUser(_a0 string, _a1 *domain.Task, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByIdAndUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Task, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITaskUseCase creates a new instance of ITaskUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskUseCase {
	mock := &ITaskUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
